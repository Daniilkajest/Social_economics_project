import requests
import pandas as pd
from tqdm import tqdm
import time

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
AREA_ID = 113 # –í—Å—è –†–æ—Å—Å–∏—è

# –°–ü–ò–°–û–ö –ü–†–û–§–ï–°–°–ò–ô, –ö–û–¢–û–†–´–ï –ú–´ –ë–£–î–ï–ú –ò–°–ö–ê–¢–¨
PROFESSIONS_TO_SEARCH = {
    'data_analyst': '–ê–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö',
    'data_engineer': 'Data Engineer OR –ò–Ω–∂–µ–Ω–µ—Ä –¥–∞–Ω–Ω—ã—Ö', # –ò—Å–ø–æ–ª—å–∑—É–µ–º OR –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–∞–∑–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
    'data_scientist': 'Data Scientist',
    'ml_engineer': 'ML Engineer OR Machine Learning',
    'nlp_engineer': 'NLP'
}

PER_PAGE = 100

def get_vacancies_by_city(text, area_id):
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º –¥–ª—è –û–î–ù–û–ì–û –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    base_url = 'https://api.hh.ru/vacancies'
    params = {'text': text, 'area': area_id, 'per_page': PER_PAGE, 'page': 0}

    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    try:
        response = requests.get(base_url, params=params)
        response.raise_for_status()
        data = response.json()
        pages = data.get('pages', 0)
    except requests.RequestException as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è '{text}': {e}")
        return None

    all_vacancies_items = []
    # tqdm –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    for page in tqdm(range(pages), desc=f"  –ü–∞—Ä—Å–∏–Ω–≥ '{text}'"):
        params['page'] = page
        try:
            response = requests.get(base_url, params=params)
            response.raise_for_status()
            all_vacancies_items.extend(response.json().get('items', []))
            time.sleep(0.2)
        except requests.RequestException:
            # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
            continue

    if not all_vacancies_items:
        return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    cities = pd.json_normalize(all_vacancies_items)['area.name']
    city_counts = cities.value_counts().reset_index()
    city_counts.columns = ['city', 'vacancies_count']
    return city_counts

if __name__ == '__main__':
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö —Å HeadHunter...")

    # –°–æ–∑–¥–∞–µ–º DataFrame, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º –æ–±—ä–µ–¥–∏–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    final_df = None

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ —Å–ª–æ–≤–∞—Ä—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    for key, search_query in PROFESSIONS_TO_SEARCH.items():
        print(f"\n[--- –ò—â–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: {search_query} ---]")

        # –ü–æ–ª—É—á–∞–µ–º DataFrame —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        vacancies_df = get_vacancies_by_city(search_query, AREA_ID)

        if vacancies_df is not None:
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É 'vacancies_count' –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–ª—é—á–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
            vacancies_df = vacancies_df.rename(columns={'vacancies_count': key})

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if final_df is None:
                final_df = vacancies_df
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'outer' join, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –≥–æ—Ä–æ–¥–∞,
                # –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –æ–¥–Ω–æ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ, –Ω–æ –Ω–µ—Ç –≤ –¥—Ä—É–≥–æ–º.
                final_df = pd.merge(final_df, vacancies_df, on='city', how='outer')

            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –¢–æ–ø-3 –≥–æ—Ä–æ–¥–∞: \n{vacancies_df.head(3)}")
        else:
            print(f"  ‚ö†Ô∏è –î–ª—è '{search_query}' –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    if final_df is not None:
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ (NaN) –Ω—É–ª—è–º–∏, —Ç–∞–∫ –∫–∞–∫ –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞—à–µ–ª—Å—è, –∑–Ω–∞—á–∏—Ç —Ç–∞–º 0 –≤–∞–∫–∞–Ω—Å–∏–π
        final_df = final_df.fillna(0)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
        for col in PROFESSIONS_TO_SEARCH.keys():
            if col in final_df.columns:
                final_df[col] = final_df[col].astype(int)

        print("\n\n--- –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–ø–µ—Ä–≤—ã–µ 15 —Å—Ç—Ä–æ–∫) ---")
        print(final_df.head(15))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        output_filename = 'hh_vacancies_by_city.csv'
        final_df.to_csv(output_filename, index=False, encoding='utf-8')
        print(f"\n‚úÖ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª: '{output_filename}'")
    else:
        print("\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
