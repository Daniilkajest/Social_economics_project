# ===============================================================
# –ö–û–î –ò–ó prepare_data.py (–¢–ï–ü–ï–†–¨ –û–ù –ó–î–ï–°–¨)
# ===============================================================
import pandas as pd
from sqlalchemy import create_engine
import os

def prepare_and_save_data():
    # --- –ù–ê–°–¢–†–û–ô–ö–ò (–¥–ª—è —Ç–≤–æ–µ–π –õ–û–ö–ê–õ–¨–ù–û–ô –ë–î) ---
    DB_USER = "postgres"
    DB_PASSWORD = "glavvrach228007" # <-- –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    DB_HOST = "localhost"
    DB_PORT = "5432"
    DB_NAME = "social_economics"

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    if not os.path.exists('dashboard_data'):
        os.makedirs('dashboard_data')

    print("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...")
    engine = create_engine(f'postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}')

    print("–ì–æ—Ç–æ–≤–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...")
    sql_query = """
    SELECT
        region, year,
        MAX(CASE WHEN indicator_name = '–°—Ä–µ–¥–Ω–µ–¥—É—à–µ–≤—ã–µ –¥–µ–Ω–µ–∂–Ω—ã–µ –¥–æ—Ö–æ–¥—ã –Ω–∞—Å–µ–ª–µ–Ω–∏—è' THEN indicator_value END) AS avg_income,
        MAX(CASE WHEN indicator_name = '–£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã' THEN indicator_value END) AS unemployment_rate,
        MAX(CASE WHEN indicator_name = '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏—Ä–æ—Å—Ç–∞ –Ω–∞ 10 000 —á–µ–ª–æ–≤–µ–∫ –Ω–∞—Å–µ–ª–µ–Ω–∏—è' THEN indicator_value END) AS migration_rate
    FROM (
        SELECT object_name AS region, year, indicator_name, indicator_value
        FROM rosstat_data WHERE object_level = '—Ä–µ–≥–∏–æ–Ω'
    ) AS filtered_data
    GROUP BY region, year ORDER BY region, year;
    """
    main_df = pd.read_sql(sql_query, engine)
    main_df.to_parquet('dashboard_data/main_data.parquet', index=False)
    print("‚úÖ –§–∞–π–ª 'main_data.parquet' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

# ===============================================================
# –ö–û–î –ò–ó test_data_preparation.py (–¢–ï–ü–ï–†–¨ –û–ù –ó–î–ï–°–¨)
# ===============================================================
def run_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    print("\n--- –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ prepare_and_save_data ---")

    output_path = 'dashboard_data/main_data.parquet'

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    prepare_and_save_data()

    print("\n--- –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ ---")

    if not os.path.exists(output_path):
        print(f"‚ùå –ü–†–û–í–ê–õ: –§–∞–π–ª {output_path} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω!")
        return False
    print(f"‚úÖ –û–ö: –§–∞–π–ª {output_path} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")

    try:
        df = pd.read_parquet(output_path)
        print("‚úÖ –û–ö: Parquet-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω.")
    except Exception as e:
        print(f"‚ùå –ü–†–û–í–ê–õ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Parquet-—Ñ–∞–π–ª: {e}")
        return False

    expected_columns = ['region', 'year', 'avg_income', 'unemployment_rate', 'migration_rate']
    if not all(col in df.columns for col in expected_columns):
        print(f"‚ùå –ü–†–û–í–ê–õ: –í DataFrame –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏.")
        return False
    print("‚úÖ –û–ö: –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ.")

    print("\nüéâüéâüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâüéâüéâ")
    return True

# --- –¢–û–ß–ö–ê –í–•–û–î–ê ---
if __name__ == '__main__':
    run_test()
